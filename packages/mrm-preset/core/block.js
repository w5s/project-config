const { file } = require('mrm-core');

/**
 * Replace a block in file that follows pattern :
 *
 * marker(markerBegin)
 * ...
 * marker(markerEnd)
 *
 * @param {{
 *   markerBegin?: string,
 *   markerEnd?: string,
 *   marker?: (mark: string) => string,
 *   path: string,
 *   block: string,
 *   insertBefore?: 'begin',
 *   insertAfter?: 'end'
 * }} options
 */
function block({
  markerBegin = 'BEGIN',
  markerEnd = 'END',
  marker = (mark) => `# ${mark} generated by mrm`,
  path,
  block: blockName,
  // @ts-ignore
  insertBefore = 'begin',
  insertAfter,
}) {
  const EOL = '\n';
  const beginBlock = marker(markerBegin);
  const endBlock = marker(markerEnd);

  /**
   * @param {string} content
   */
  function findBlock(content) {
    const startIndex = content.indexOf(beginBlock);
    const endIndex = content.indexOf(endBlock) + endBlock.length;

    return {
      endIndex,
      exists: startIndex >= 0 && endIndex >= 0,
      startIndex,
    };
  }

  /**
   * @param {string} fullContent
   * @param {string} blockContent
   */
  function apply(fullContent, blockContent) {
    const found = findBlock(fullContent);
    const replaceBlock = beginBlock + EOL + blockContent + EOL + endBlock;

    if (found.exists) {
      return fullContent.substr(0, found.startIndex) + replaceBlock + fullContent.substr(found.endIndex);
    }

    // insert
    if (insertAfter === 'end') {
      return fullContent + EOL + replaceBlock;
    }

    // if (insertBefore === 'begin') {
    return replaceBlock + EOL + fullContent;
    // }
  }

  const sourceFile = file(path);
  const sourceContent = sourceFile.get();
  sourceFile.save(apply(sourceContent, blockName));
}

module.exports = block;
