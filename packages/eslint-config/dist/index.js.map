{"version":3,"sources":["../src/config/ignores.ts","../src/type/StylisticConfig.ts","../src/config/jsonc.ts","../src/config/imports.ts","../src/config/node.ts","../src/config/ts.ts","../src/config/yml.ts","../src/defineConfig.ts","../src/index.ts"],"names":["interopDefault","defaultFiles","Project","ymlConfigs"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'node:fs';\nimport nodePath from 'node:path';\nimport process from 'node:process';\nimport findUp from 'find-up';\nimport parseGitignore from 'parse-gitignore';\nimport type { Config } from '../type.js';\n\nconst getGitignore = async (cwd: string,prefix = ''): Promise<Array<string>> => {\n  const gitIgnoreFile = await findUp(nodePath.join(prefix, '.gitignore'), { cwd });\n  if (gitIgnoreFile != null) {\n    // eslint-disable-next-line node/no-sync\n    const { patterns } = parseGitignore.parse(await fs.promises.readFile(gitIgnoreFile));\n    const returnValue = patterns.map((pattern) => nodePath.join(prefix, pattern));\n    return returnValue;\n  }\n  return [];\n};\n\nexport async function ignores(options: ignores.Options = {}) {\n  const cwd = process.cwd();\n  return [\n    {\n      ignores: [\n        '**/node_modules',\n        '**/dist',\n        '**/package-lock.json',\n        '**/yarn.lock',\n        '**/pnpm-lock.yaml',\n        '**/bun.lockb',\n\n        '**/.docusaurus',\n        '**/output',\n        '**/coverage',\n        '**/temp',\n        '**/.temp',\n        '**/tmp',\n        '**/.tmp',\n        '**/.history',\n        '**/.vitepress/cache',\n        '**/.nuxt',\n        '**/.next',\n        '**/.svelte-kit',\n        '**/.vercel',\n        '**/.changeset',\n        '**/.idea',\n        '**/.cache',\n        '**/.output',\n        '**/.vite-inspect',\n        '**/.yarn',\n        '**/vendor',\n        '**/vendors',\n        '**/*.min.*',\n\n        '**/*.timestamp-*.mjs', // esbuild/vite temporary files\n\n        // '!.*',\n        // '.common/',\n        // '.go/',\n        // '.modules/',\n        // '.pnpm-store/',\n        // '.venv/',\n        // 'deprecated/',\n        // 'test-output/',\n        // 'venv/',\n        // '_generated_/',\n\n        ...await getGitignore(cwd),\n        ...await getGitignore(cwd, 'android'),\n        ...await getGitignore(cwd, 'ios'),\n        ...(options.ignores ?? []),\n      ] as Array<string>,\n      name: 'w5s/ignore',\n    },\n  ] as const satisfies Array<Config>;\n}\nexport namespace ignores {\n  export interface Options {\n    ignores?: string[];\n  }\n}\n","import type { StylisticCustomizeOptions } from '@stylistic/eslint-plugin';\n\nexport interface StylisticConfig {\n  enabled: boolean;\n  indent: NonNullable<StylisticCustomizeOptions['indent']>;\n  quotes: NonNullable<StylisticCustomizeOptions['quotes']>;\n  jsx: NonNullable<StylisticCustomizeOptions['jsx']>;\n  semi: NonNullable<StylisticCustomizeOptions['semi']>;\n}\n\nexport interface StylisticParameters extends Partial<StylisticConfig> {}\n\nconst defaultConfig = {\n  enabled: true,\n  indent: 2,\n  quotes: 'single',\n  jsx: true,\n  semi: true,\n} satisfies StylisticConfig;\n/**\n * @namespace\n */\nexport const StylisticConfig = {\n  /**\n   * Default config\n   */\n  default: defaultConfig,\n\n  /**\n   * Return a new StylisticConfig from input\n   *\n   * @param input\n   */\n  from(input: boolean | StylisticParameters): StylisticConfig {\n    return typeof input === 'boolean' ? { ...defaultConfig, enabled: input } : { ...defaultConfig, ...input };\n  }\n}\n\n\n\n\n","import { interopDefault, Project } from '@w5s/dev';\nimport { StylisticConfig, type PluginOptionsBase, type Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/jsonc.js';\n\nconst defaultFiles = [`**/${Project.extensionsToGlob(['.json', '.json5', '.jsonc'])}`];\n\nexport async function jsonc(options: jsonc.Options = {}) {\n  const [jsoncPlugin, jsoncParser] = await Promise.all([\n    import('eslint-plugin-jsonc'),\n    interopDefault(import('jsonc-eslint-parser')),\n  ] as const);\n  const { files = defaultFiles, rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled, indent } = StylisticConfig.from(stylistic);\n\n  return [\n    {\n      name: 'w5s/jsonc/setup',\n      plugins: {\n        jsonc: await interopDefault(jsoncPlugin),\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: jsoncParser,\n      },\n      name: 'w5s/jsonc/rules',\n      rules: {\n        ...(jsoncPlugin.configs['flat/recommended-with-json'][0]?.rules),\n        ...(stylisticEnabled\n          ? {\n              'jsonc/array-bracket-spacing': ['error', 'never'],\n              'jsonc/comma-dangle': ['error', 'never'],\n              'jsonc/comma-style': ['error', 'last'],\n              'jsonc/indent': ['error', indent],\n              'jsonc/key-spacing': ['error', { afterColon: true, beforeColon: false }],\n              'jsonc/object-curly-newline': ['error', { consistent: true, multiline: true }],\n              'jsonc/object-curly-spacing': ['error', 'always'],\n              'jsonc/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],\n              'jsonc/quote-props': 'error',\n              'jsonc/quotes': 'error',\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace jsonc {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { PluginOptionsBase, StylisticConfig, type Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/import.js';\n// @ts-ignore\nimport importPlugin from 'eslint-plugin-import';\n\nconst importConfig = importPlugin.flatConfigs['recommended'];\n\nexport async function imports(options: imports.Options = {}) {\n  const { rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled } = StylisticConfig.from(stylistic);\n  return [\n    {\n      name: 'w5s/import/rules',\n      plugins: importConfig.plugins,\n      rules: {\n        ...(importConfig?.rules),\n        ...(stylisticEnabled\n          ? {\n              // Stylistic rules\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ] as const satisfies Array<Config>;\n}\n\nexport namespace imports {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { interopDefault } from '@w5s/dev';\nimport { type Config, type PluginOptionsBase } from '../type.js';\nimport type { RuleOptions } from '../typegen/node.js';\n\nexport async function node(options: node.Options = {}) {\n  const [nodePlugin] = await Promise.all([\n    import('eslint-plugin-n'),\n  ] as const);\n  const { rules = {}, stylistic = true } = options;\n  // const { enabled: stylisticEnabled } = StylisticConfig.from(stylistic);\n  return [\n    {\n      name: 'w5s/node/setup',\n      plugins: {\n        node: await interopDefault(nodePlugin),\n      },\n    },\n    {\n      name: 'w5s/node/rules',\n      rules: {\n        // 'node/handle-callback-err': ['error', '^(err|error|_error)$'],\n        'node/no-deprecated-api': 'error',\n        'node/no-exports-assign': 'error',\n        'node/no-new-require': 'error',\n        'node/no-path-concat': 'error',\n        'node/no-sync': 'error',\n        'node/prefer-global/buffer': ['error', 'never'],\n        'node/prefer-global/console': ['error', 'always'],\n        // 'node/prefer-global/process': ['error', 'never'],\n        'node/prefer-global/url': ['error', 'always'],\n        'node/prefer-global/url-search-params': ['error', 'always'],\n        'node/process-exit-as-throw': 'error',\n        // ...(stylisticEnabled\n        //   ? {}\n        //   : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace node {\n  export type Rules = RuleOptions;\n\n  export interface Options extends Omit<PluginOptionsBase<Rules>, 'files'> {}\n}\n","import { ESLintConfig, interopDefault, Project } from '@w5s/dev';\nimport { StylisticConfig, type PluginOptionsBase, type Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/ts.js';\n\nconst defaultFiles = [`**/${Project.extensionsToGlob(Project.queryExtensions(['typescript', 'typescriptreact']))}`];\n\nexport async function ts(options: ts.Options = {}) {\n  const [tsPlugin, tsParser] = await Promise.all([\n    import('@typescript-eslint/eslint-plugin'),\n    interopDefault(import('@typescript-eslint/parser')),\n  ] as const);\n  const tsRecommendedRules = tsPlugin.configs['eslint-recommended']!.overrides![0]!.rules!;\n  const tsStrictRules = tsPlugin.configs['strict']!.rules!;\n  const { files = defaultFiles, rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled, indent } = StylisticConfig.from(stylistic);\n\n  return [\n    {\n      name: 'w5s/ts/setup',\n      plugins: {\n        ts: await interopDefault(tsPlugin),\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: tsParser,\n        parserOptions: {\n          sourceType: 'module',\n          // extraFileExtensions: componentExts.map(ext => `.${ext}`),\n          // ...typeAware\n          //   ? {\n          //       projectService: {\n          //         allowDefaultProject: ['./*.js'],\n          //         defaultProject: tsconfigPath,\n          //       },\n          //       tsconfigRootDir: process.cwd(),\n          //     }\n          //   : {},\n          // ...parserOptions as any,\n        },\n      },\n      name: 'w5s/ts/rules',\n      rules: {\n        ...ESLintConfig.renameRules(\n          tsRecommendedRules,\n          { '@typescript-eslint': 'ts' },\n        ),\n        ...ESLintConfig.renameRules(\n          tsStrictRules,\n          { '@typescript-eslint': 'ts' },\n        ),\n        ...(stylisticEnabled\n          ? {\n\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace ts {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { interopDefault, Project } from '@w5s/dev';\nimport { StylisticConfig, type Config, type PluginOptionsBase } from '../type.js';\nimport type { RuleOptions } from '../typegen/yml.js';\nimport { configs as ymlConfigs } from 'eslint-plugin-yml';\n\nconst defaultFiles = [`**/${Project.extensionsToGlob(Project.queryExtensions(['yaml']))}`];\n\nexport async function yml(options: yml.Options = {}) {\n  const [ymlPlugin, ymlParser] = await Promise.all([\n    import('eslint-plugin-yml'),\n    interopDefault(import('yaml-eslint-parser')),\n  ] as const);\n  const { files = defaultFiles, rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled, indent, quotes } = StylisticConfig.from(stylistic);\n\n  return [\n    {\n      name: 'w5s/yml/setup',\n      plugins: {\n        yml: await interopDefault(ymlPlugin),\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: ymlParser,\n      },\n      name: 'w5s/yml/rules',\n      rules: {\n        ...(ymlConfigs['flat/recommended'][0]!.rules),\n        ...(ymlConfigs['flat/recommended'][1]!.rules),\n        ...(ymlConfigs['flat/recommended'][2]!.rules),\n        ...(stylisticEnabled\n          ? {\n              ...(ymlConfigs['flat/standard'][3]!.rules),\n              'yml/array-bracket-spacing': ['error', 'never'],\n              'yml/comma-dangle': ['error', 'never'],\n              'yml/comma-style': ['error', 'last'],\n\n              'yml/object-curly-newline': ['error', { consistent: true, multiline: true }],\n              'yml/object-curly-spacing': ['error', 'always'],\n              'yml/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],\n              'yml/quote-props': 'error',\n\n              'yml/block-mapping-question-indicator-newline': 'error',\n              'yml/block-sequence-hyphen-indicator-newline': 'error',\n              'yml/flow-mapping-curly-newline': 'error',\n              'yml/flow-mapping-curly-spacing': 'error',\n              'yml/flow-sequence-bracket-newline': 'error',\n              'yml/flow-sequence-bracket-spacing': 'error',\n              'yml/indent': ['error', indent === 'tab' ? 2 : indent],\n              'yml/key-spacing': ['error', { afterColon: true, beforeColon: false }],\n              'yml/no-tab-indent': 'error',\n              'yml/quotes': ['error', { avoidEscape: true, prefer: quotes === 'backtick' ? 'single' as const : quotes }],\n              'yml/spaced-comment': 'error',\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace yml {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { jsonc, ignores, imports, node, ts, yml } from './config.js';\nimport type { Config } from './type.js';\n\nexport interface DefineConfigOptions extends ignores.Options {\n  import?: boolean | imports.Options;\n  jsonc?: boolean | jsonc.Options;\n  node?: boolean | node.Options;\n  ts?: boolean | ts.Options;\n  yml?: boolean | yml.Options;\n}\n\nexport async function defineConfig(options: DefineConfigOptions = {}) {\n  const importOptions = typeof options.import === 'boolean' ? { enabled: options.import } : { enabled: true, ...options.import };\n  const jsoncOptions = typeof options.jsonc === 'boolean' ? { enabled: options.jsonc } : { enabled: true, ...options.jsonc };\n  const nodeOptions = typeof options.node === 'boolean' ? { enabled: options.node } : { enabled: true, ...options.node };\n  const tsOptions = typeof options.ts === 'boolean' ? { enabled: options.ts } : { enabled: true, ...options.ts };\n  const ymlOptions = typeof options.yml === 'boolean' ? { enabled: options.yml } : { enabled: false, ...options.yml };\n\n  let returnValue: Array<Config> = [];\n  const append = async (config: any[]) =>  {\n    returnValue = [...returnValue, ...config as any];\n  };\n\n  append(await ignores(options));\n\n  if (jsoncOptions.enabled) {\n    append(await jsonc(jsoncOptions));\n    // sortPackageJson()\n    // sortTsconfig()\n  }\n  if (importOptions.enabled) {\n    append(await imports(importOptions));\n  }\n  if (nodeOptions.enabled) {\n    append(await node(nodeOptions));\n  }\n  if (tsOptions.enabled) {\n    append(await ts(tsOptions));\n  }\n  if (ymlOptions.enabled) {\n    append(await yml(ymlOptions));\n  }\n  return returnValue;\n}\n","import { defineConfig } from './defineConfig.js';\n\nexport * from './defineConfig.js';\nexport * from './config.js';\nexport default defineConfig;\n"]}