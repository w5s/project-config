{"version":3,"sources":["../src/config/jsonc.ts","../src/config/imports.ts","../src/defineConfig.ts","../src/index.ts"],"names":["Project","interopDefault","jsoncConfigs","importPlugin","defaultStylistic"],"mappings":"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","file":"index.cjs","sourcesContent":["import { interopDefault, Project } from '@w5s/dev';\nimport type { Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/jsonc.js';\nimport { configs as jsoncConfigs } from 'eslint-plugin-jsonc';\n\nconst defaultFiles = [Project.extensionsToGlob(['.json', '.json5', '.jsonc'])];\nconst defaultStylistic = { indent: 2 };\n\nexport async function jsonc(options: jsonc.Options = {}) {\n  const [jsoncPlugin, jsoncParser] = await Promise.all([\n    interopDefault(import('eslint-plugin-jsonc')),\n    interopDefault(import('jsonc-eslint-parser')),\n  ] as const);\n  const { files = defaultFiles, rules = {}, rulesStylistic = true } = options;\n\n  const { indent } = {\n    ...defaultStylistic,\n    ...(typeof rulesStylistic === 'boolean' ? {} : rulesStylistic),\n  };\n\n  return [\n    {\n      name: 'w5s/jsonc/setup',\n      plugins: {\n        jsonc: jsoncPlugin,\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: jsoncParser,\n      },\n      name: 'w5s/jsonc/rules',\n      rules: {\n        ...(jsoncConfigs['flat/recommended-with-json'][0]?.rules),\n        ...(rulesStylistic\n          ? {\n              'jsonc/array-bracket-spacing': ['error', 'never'],\n              'jsonc/comma-dangle': ['error', 'never'],\n              'jsonc/comma-style': ['error', 'last'],\n              'jsonc/indent': ['error', indent],\n              'jsonc/key-spacing': ['error', { afterColon: true, beforeColon: false }],\n              'jsonc/object-curly-newline': ['error', { consistent: true, multiline: true }],\n              'jsonc/object-curly-spacing': ['error', 'always'],\n              'jsonc/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],\n              'jsonc/quote-props': 'error',\n              'jsonc/quotes': 'error',\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace jsonc {\n  export type Rules = RuleOptions;\n\n  export interface Options {\n    files?: Config['files'];\n    rules?: Rules;\n    rulesStylistic?: boolean;\n  }\n}\n","import type { Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/import.js';\n// @ts-ignore\nimport importPlugin from 'eslint-plugin-import';\n\nconst importConfig = importPlugin.flatConfigs['recommended'];\nconst defaultStylistic = { indent: 2 };\n\nexport async function imports(options: imports.Options = {}) {\n  const { rules = {}, rulesStylistic = true } = options;\n\n  const { indent } = {\n    ...defaultStylistic,\n    ...(typeof rulesStylistic === 'boolean' ? {} : rulesStylistic),\n  };\n\n  return [\n    {\n      name: 'w5s/import/rules',\n      plugins: importConfig.plugins,\n      rules: {\n        ...(importConfig?.rules),\n        ...(rulesStylistic\n          ? {\n              // Stylistic rules\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace imports {\n  export type Rules = RuleOptions;\n\n  export interface Options {\n    rules?: Rules;\n    rulesStylistic?: boolean;\n  }\n}\n","import { jsonc, imports } from './config.js';\nimport { Config } from './type.js';\n\nexport interface DefineConfigOptions {\n  import?: boolean | imports.Options;\n  jsonc?: boolean | jsonc.Options;\n}\n\nexport async function defineConfig(options: DefineConfigOptions = {}) {\n  const importOptions = typeof options.import === 'boolean' ? { enabled: options.import } : { enabled: true, ...options.import };\n  const jsoncOptions = typeof options.jsonc === 'boolean' ? { enabled: options.jsonc } : { enabled: true, ...options.jsonc };\n\n  let returnValue: Array<Config> = [];\n  const append = async (config: any[]) =>  {\n    returnValue = [...returnValue, ...config as any]\n  };\n\n  if (jsoncOptions.enabled) {\n    append(await jsonc(jsoncOptions))\n    // sortPackageJson()\n    // sortTsconfig()\n  }\n  if (importOptions.enabled) {\n    append(await imports(importOptions))\n  }\n\n\n\n  return returnValue;\n}\n","import { defineConfig } from './defineConfig.js';\n\nexport * from './defineConfig.js';\nexport * from './config.js';\nexport default defineConfig;\n"]}