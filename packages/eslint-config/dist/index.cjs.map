{"version":3,"sources":["../src/type/StylisticConfig.ts","../src/config/jsonc.ts","../src/config/imports.ts","../src/config/node.ts","../src/config/yml.ts","../src/defineConfig.ts","../src/index.ts"],"names":["Project","interopDefault","importPlugin","defaultFiles","ymlConfigs"],"mappings":"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","file":"index.cjs","sourcesContent":["import type { StylisticCustomizeOptions } from '@stylistic/eslint-plugin';\n\nexport interface StylisticConfig {\n  enabled: boolean;\n  indent: NonNullable<StylisticCustomizeOptions['indent']>;\n  quotes: NonNullable<StylisticCustomizeOptions['quotes']>;\n  jsx: NonNullable<StylisticCustomizeOptions['jsx']>;\n  semi: NonNullable<StylisticCustomizeOptions['semi']>;\n}\n\nexport interface StylisticParameters extends Partial<StylisticConfig> {}\n\nconst defaultConfig = {\n  enabled: true,\n  indent: 2,\n  quotes: 'single',\n  jsx: true,\n  semi: true,\n} satisfies StylisticConfig;\n/**\n * @namespace\n */\nexport const StylisticConfig = {\n  /**\n   * Default config\n   */\n  default: defaultConfig,\n\n  /**\n   * Return a new StylisticConfig from input\n   *\n   * @param input\n   */\n  from(input: boolean | StylisticParameters): StylisticConfig {\n    return typeof input === 'boolean' ? { ...defaultConfig, enabled: input } : { ...defaultConfig, ...input };\n  }\n}\n\n\n\n\n","import { interopDefault, Project } from '@w5s/dev';\nimport { StylisticConfig, type PluginOptionsBase, type Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/jsonc.js';\n\nconst defaultFiles = [Project.extensionsToGlob(['.json', '.json5', '.jsonc'])];\n\nexport async function jsonc(options: jsonc.Options = {}) {\n  const [jsoncPlugin, jsoncParser] = await Promise.all([\n    import('eslint-plugin-jsonc'),\n    interopDefault(import('jsonc-eslint-parser')),\n  ] as const);\n  const { files = defaultFiles, rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled, indent } = StylisticConfig.from(stylistic);\n\n  return [\n    {\n      name: 'w5s/jsonc/setup',\n      plugins: {\n        jsonc: await interopDefault(jsoncPlugin),\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: jsoncParser,\n      },\n      name: 'w5s/jsonc/rules',\n      rules: {\n        ...(jsoncPlugin.configs['flat/recommended-with-json'][0]?.rules),\n        ...(stylisticEnabled\n          ? {\n              'jsonc/array-bracket-spacing': ['error', 'never'],\n              'jsonc/comma-dangle': ['error', 'never'],\n              'jsonc/comma-style': ['error', 'last'],\n              'jsonc/indent': ['error', indent],\n              'jsonc/key-spacing': ['error', { afterColon: true, beforeColon: false }],\n              'jsonc/object-curly-newline': ['error', { consistent: true, multiline: true }],\n              'jsonc/object-curly-spacing': ['error', 'always'],\n              'jsonc/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],\n              'jsonc/quote-props': 'error',\n              'jsonc/quotes': 'error',\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace jsonc {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { PluginOptionsBase, StylisticConfig, type Config } from '../type.js';\nimport type { RuleOptions } from '../typegen/import.js';\n// @ts-ignore\nimport importPlugin from 'eslint-plugin-import';\n\nconst importConfig = importPlugin.flatConfigs['recommended'];\n\nexport async function imports(options: imports.Options = {}) {\n  const { rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled } = StylisticConfig.from(stylistic);\n  return [\n    {\n      name: 'w5s/import/rules',\n      plugins: importConfig.plugins,\n      rules: {\n        ...(importConfig?.rules),\n        ...(stylisticEnabled\n          ? {\n              // Stylistic rules\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace imports {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { interopDefault } from '@w5s/dev';\nimport { type Config, type PluginOptionsBase } from '../type.js';\nimport type { RuleOptions } from '../typegen/node.js';\n\nexport async function node(options: node.Options = {}) {\n  const [nodePlugin] = await Promise.all([\n    import('eslint-plugin-n'),\n  ] as const);\n  const { rules = {}, stylistic = true } = options;\n  // const { enabled: stylisticEnabled } = StylisticConfig.from(stylistic);\n  return [\n    {\n      name: 'w5s/node/setup',\n      plugins: {\n        node: await interopDefault(nodePlugin),\n      },\n    },\n    {\n      name: 'w5s/node/rules',\n      rules: {\n        // 'node/handle-callback-err': ['error', '^(err|error|_error)$'],\n        'node/no-deprecated-api': 'error',\n        'node/no-exports-assign': 'error',\n        'node/no-new-require': 'error',\n        'node/no-path-concat': 'error',\n        'node/no-sync': 'error',\n        'node/prefer-global/buffer': ['error', 'never'],\n        'node/prefer-global/console': ['error', 'always'],\n        // 'node/prefer-global/process': ['error', 'never'],\n        'node/prefer-global/url': ['error', 'always'],\n        'node/prefer-global/url-search-params': ['error', 'always'],\n        'node/process-exit-as-throw': 'error',\n        // ...(stylisticEnabled\n        //   ? {}\n        //   : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace node {\n  export type Rules = RuleOptions;\n\n  export interface Options extends Omit<PluginOptionsBase<Rules>, 'files'> {}\n}\n","import { interopDefault, Project } from '@w5s/dev';\nimport { StylisticConfig, type Config, type PluginOptionsBase } from '../type.js';\nimport type { RuleOptions } from '../typegen/yml.js';\nimport { configs as ymlConfigs } from 'eslint-plugin-yml';\n\nconst defaultFiles = [Project.extensionsToGlob(Project.queryExtensions(['yaml']))];\n\nexport async function yml(options: yml.Options = {}) {\n  const [ymlPlugin, ymlParser] = await Promise.all([\n    import('eslint-plugin-yml'),\n    interopDefault(import('yaml-eslint-parser')),\n  ] as const);\n  const { files = defaultFiles, rules = {}, stylistic = true } = options;\n  const { enabled: stylisticEnabled, indent, quotes } = StylisticConfig.from(stylistic);\n\n  return [\n    {\n      name: 'w5s/yml/setup',\n      plugins: {\n        yml: await interopDefault(ymlPlugin),\n      },\n    },\n    {\n      files,\n      languageOptions: {\n        parser: ymlParser,\n      },\n      name: 'w5s/yml/rules',\n      rules: {\n        ...(ymlConfigs['flat/recommended'][0]!.rules),\n        ...(ymlConfigs['flat/recommended'][1]!.rules),\n        ...(ymlConfigs['flat/recommended'][2]!.rules),\n        ...(stylisticEnabled\n          ? {\n              ...(ymlConfigs['flat/standard'][3]!.rules),\n              'yml/array-bracket-spacing': ['error', 'never'],\n              'yml/comma-dangle': ['error', 'never'],\n              'yml/comma-style': ['error', 'last'],\n\n              'yml/object-curly-newline': ['error', { consistent: true, multiline: true }],\n              'yml/object-curly-spacing': ['error', 'always'],\n              'yml/object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],\n              'yml/quote-props': 'error',\n\n              'yml/block-mapping-question-indicator-newline': 'error',\n              'yml/block-sequence-hyphen-indicator-newline': 'error',\n              'yml/flow-mapping-curly-newline': 'error',\n              'yml/flow-mapping-curly-spacing': 'error',\n              'yml/flow-sequence-bracket-newline': 'error',\n              'yml/flow-sequence-bracket-spacing': 'error',\n              'yml/indent': ['error', indent === 'tab' ? 2 : indent],\n              'yml/key-spacing': ['error', { afterColon: true, beforeColon: false }],\n              'yml/no-tab-indent': 'error',\n              'yml/quotes': ['error', { avoidEscape: true, prefer: quotes === 'backtick' ? 'single' as const : quotes }],\n              'yml/spaced-comment': 'error',\n            }\n          : {}),\n        ...rules,\n      },\n    },\n  ]  as const satisfies Array<Config>;\n}\n\nexport namespace yml {\n  export type Rules = RuleOptions;\n\n  export interface Options extends PluginOptionsBase<Rules> {}\n}\n","import { jsonc, imports, node, yml } from './config.js';\nimport { Config } from './type.js';\n\nexport interface DefineConfigOptions {\n  import?: boolean | imports.Options;\n  jsonc?: boolean | jsonc.Options;\n  node?: boolean | node.Options;\n  yml?: boolean | yml.Options;\n}\n\nexport async function defineConfig(options: DefineConfigOptions = {}) {\n  const importOptions = typeof options.import === 'boolean' ? { enabled: options.import } : { enabled: true, ...options.import };\n  const jsoncOptions = typeof options.jsonc === 'boolean' ? { enabled: options.jsonc } : { enabled: true, ...options.jsonc };\n  const nodeOptions = typeof options.node === 'boolean' ? { enabled: options.node } : { enabled: true, ...options.node };\n  const ymlOptions = typeof options.yml === 'boolean' ? { enabled: options.yml } : { enabled: false, ...options.yml };\n\n  let returnValue: Array<Config> = [];\n  const append = async (config: any[]) =>  {\n    returnValue = [...returnValue, ...config as any];\n  };\n\n  if (jsoncOptions.enabled) {\n    append(await jsonc(jsoncOptions));\n    // sortPackageJson()\n    // sortTsconfig()\n  }\n  if (importOptions.enabled) {\n    append(await imports(importOptions));\n  }\n  if (nodeOptions.enabled) {\n    append(await node(nodeOptions));\n  }\n  if (ymlOptions.enabled) {\n    append(await yml(ymlOptions));\n  }\n  return returnValue;\n}\n","import { defineConfig } from './defineConfig.js';\n\nexport * from './defineConfig.js';\nexport * from './config.js';\nexport default defineConfig;\n"]}