{"version":3,"file":"index.js","names":["enumValues: readonly CommitConventionalType[]","typeData: Record<CommitConventionalType, CommitConventionalTypeData>","conversionMap: ReadonlyMap<GitmojiCode, CommitConventionalType>","toConventionalCommitType"],"sources":["../src/git-raw-commit-opts.ts","../src/parser.ts","../src/data.ts","../src/gitmoji.ts","../src/whatBump.ts","../src/transform.ts","../src/writer.ts","../src/index.ts"],"sourcesContent":["export const gitRawCommitOpts = {\n  format: '%B%n-hash-%n%H%n-gitTags-%n%d%n-committerDate-%n%ci%n-authorName-%n%an%n-authorEmail-%n%ae',\n};\n","import type { ParserOptions as ParserOptionsDefault } from 'conventional-commits-parser';\n\nexport interface ParserOptions extends ParserOptionsDefault {}\n\nexport const createParserOpts = (): ParserOptions => ({\n  headerPattern: new RegExp(\n    // Type\n    `^(?<type>\\\\S*)? ` +\n    // Scope\n    `(?:\\\\((?<scope>.*)\\\\):? )?` +\n    // Subject\n    `(?<subject>.*)$`,\n    'u',\n  ),\n  headerCorrespondence: ['type', 'scope', 'subject'],\n  revertPattern: /^(?:revert|revert:)\\s\"?([\\S\\s]+?)\"?\\s*this reverts commit (\\w*)\\./i,\n  noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES'],\n  // revertPattern: /revert:\\s([\\S\\s]*?)\\s*this reverts commit (\\w*)\\./i,\n  revertCorrespondence: [`header`, `hash`],\n});\n","import type { Commit as CommitDefault } from 'conventional-commits-parser';\n\nexport type Commit = CommitDefault & {\n  type: string | null;\n  subject: string | null;\n  scope: string | null;\n  hash: string | null;\n};\n\nexport type CommitConventionalType =\n  | 'build'\n  | 'ci'\n  | 'docs'\n  | 'feat'\n  | 'fix'\n  | 'perf'\n  | 'refactor'\n  | 'revert'\n  | 'style'\n  | 'test'\n  | 'wip'\n  | 'chore';\n\nexport const CommitConventionalType = (() => {\n  const enumObject = Object.freeze({\n    Build: 'build',\n    CI: 'ci',\n    Docs: 'docs',\n    Feat: 'feat',\n    Fix: 'fix',\n    Perf: 'perf',\n    Refactor: 'refactor',\n    Revert: 'revert',\n    Style: 'style',\n    Test: 'test',\n    WIP: 'wip',\n    Chore: 'chore',\n  });\n  // eslint-disable-next-line unicorn/no-array-sort\n  const enumValues: readonly CommitConventionalType[] = Object.freeze(Object.values(enumObject).sort());\n  const enumValuesSet = new Set(enumValues);\n\n  const typeData: Record<CommitConventionalType, CommitConventionalTypeData> = {\n    feat: {\n      'emoji': '‚ú®',\n      'en-US': 'Features',\n      'changelog': true,\n    },\n    fix: {\n      'emoji': 'üêõ',\n      'en-US': 'Bug Fixes',\n      'changelog': true,\n    },\n    build: {\n      'emoji': 'üë∑',\n      'en-US': 'Build System',\n      'changelog': false,\n    },\n    chore: {\n      'emoji': 'üé´',\n      'en-US': 'Chores',\n      'changelog': false,\n    },\n    ci: {\n      'emoji': 'üîß',\n      'en-US': 'Continuous Integration',\n      'changelog': false,\n    },\n    docs: {\n      'emoji': 'üìù',\n      'en-US': 'Documentation',\n      'changelog': false,\n    },\n    test: {\n      'emoji': '‚úÖ',\n      'en-US': 'Tests',\n      'changelog': false,\n    },\n    perf: {\n      'emoji': '‚ö°',\n      'en-US': 'Performance Improvements',\n      'changelog': true,\n    },\n    refactor: {\n      'emoji': '‚ôª',\n      'en-US': 'Code Refactoring',\n      'changelog': false,\n    },\n    revert: {\n      'emoji': '‚è™',\n      'en-US': 'Reverts',\n      'changelog': true,\n    },\n    style: {\n      'emoji': 'üíÑ',\n      'en-US': 'Styles',\n      'changelog': false,\n    },\n    wip: {\n      'emoji': 'üöß',\n      'en-US': 'Work in progress',\n      'changelog': false,\n    },\n  };\n\n  function hasInstance(anyValue: unknown): anyValue is CommitConventionalType {\n    return typeof anyValue === 'string' && enumValuesSet.has(anyValue as unknown as CommitConventionalType);\n  }\n\n  function getData(commitType: CommitConventionalType): CommitConventionalTypeData {\n    return typeData[commitType];\n  }\n\n  function parse(anyValue: string): CommitConventionalType | undefined {\n    return hasInstance(anyValue) ? anyValue : undefined;\n  }\n\n  function values() {\n    return enumValues;\n  }\n\n  function findWhere(predicate: (data: CommitConventionalTypeData) => boolean): CommitConventionalType[] {\n    return enumValues.filter((enumValue) => predicate(getData(enumValue)));\n  }\n\n  return { ...enumObject, hasInstance, getData, values, parse, findWhere };\n})();\n\nexport interface CommitConventionalTypeData {\n  'emoji': string;\n  'en-US': string;\n  'changelog': boolean;\n}\n","/* eslint-disable unicorn/prefer-spread */\nimport emojiRegexp from 'emoji-regex';\nimport { type Gitmoji, gitmojis } from 'gitmojis';\nimport type { CommitConventionalType } from './data.js';\n\nexport type Emoji = Emoji.Unicode | Emoji.Text;\nexport namespace Emoji {\n  export const reEmojiUnicode = emojiRegexp();\n\n  export const reEmojiText = /:\\w*:/;\n\n  const reMatchOnly = (input: RegExp) => new RegExp(`^${input.source}$`, '');\n  const _reEmojiUnicode = reMatchOnly(reEmojiUnicode);\n  const _reEmojiText = reMatchOnly(reEmojiText);\n\n  export type Unicode = string & { '@@EmojiStyle': 'unicode' };\n  export type Text = string & { '@@EmojiStyle': 'text' };\n\n  export function isUnicode(anyValue: string): anyValue is Unicode {\n    return _reEmojiUnicode.test(anyValue);\n  }\n\n  export function isText(anyValue: string): anyValue is Text {\n    return _reEmojiText.test(anyValue);\n  }\n\n  export function hasInstance(anyValue: string): anyValue is Emoji {\n    return isText(anyValue) || isUnicode(anyValue);\n  }\n}\n\nexport type GitmojiCode = Emoji & { '@@Gitmoji': true };\nexport namespace GitmojiCode {\n  export type Unicode = Emoji.Unicode & { '@@Gitmoji': true };\n  export type Emoji = Emoji.Text & { '@@Gitmoji': true };\n\n  // export const reEmoji = emojiRegexp();\n\n  const allGitmojiCodes = new Set(\n    gitmojis\n      .map((gitmoji) => gitmoji.code as GitmojiCode)\n      .concat(gitmojis.map((gitmoji) => gitmoji.emoji as GitmojiCode)),\n  );\n  const index = {\n    // code: createIndex(gitmojis, 'code'),\n    emoji: createIndex(gitmojis, 'emoji'),\n  };\n\n  function createIndex<K extends keyof Gitmoji>(list: readonly Gitmoji[], key: K): ReadonlyMap<Gitmoji[K], Gitmoji> {\n    return new Map(list.map((gitmoji) => [gitmoji[key], gitmoji]));\n  }\n\n  export function isValid(anyValue: string): anyValue is GitmojiCode {\n    return allGitmojiCodes.has(anyValue as GitmojiCode);\n  }\n\n  const defaultType = 'chore';\n  const conversionMap: ReadonlyMap<GitmojiCode, CommitConventionalType> = (() => {\n    const data: Record<CommitConventionalType, GitmojiCode.Unicode[]> = {\n      feat: ['‚ú®', '‚ôøÔ∏è', 'üö∏'] as GitmojiCode.Unicode[],\n      fix: ['üêõ'] as GitmojiCode.Unicode[],\n      docs: ['üìù'] as GitmojiCode.Unicode[],\n      style: ['üé®', 'üö®'] as GitmojiCode.Unicode[],\n      refactor: ['‚ôªÔ∏è', 'üèóÔ∏è'] as GitmojiCode.Unicode[],\n      test: ['‚úÖ', 'üß™'] as GitmojiCode.Unicode[],\n      perf: ['‚ö°Ô∏è'] as GitmojiCode.Unicode[],\n      revert: ['‚è™Ô∏è'] as GitmojiCode.Unicode[],\n      ci: ['üë∑', 'üíö'] as GitmojiCode.Unicode[],\n      wip: ['üöß'] as GitmojiCode.Unicode[],\n      build: [] as GitmojiCode.Unicode[],\n      chore: ['üîß'] as GitmojiCode.Unicode[],\n    };\n\n    const entries = Array.from<[CommitConventionalType, GitmojiCode.Unicode[]]>(\n      // @ts-ignore entries are not well typed\n      Object.entries(data),\n    );\n    return new Map(\n      entries.reduce<Array<[GitmojiCode, CommitConventionalType]>>(\n        (acc, [commitType, gitmojiUnicodeArray]) =>\n          acc\n            .concat(gitmojiUnicodeArray.map((gitmojiUnicode) => [gitmojiUnicode, commitType]))\n\n            .concat(\n              gitmojiUnicodeArray.map((gitmojiUnicode) => [\n                // eslint-disable-next-line ts/no-non-null-assertion, ts/no-non-null-asserted-optional-chain\n                index.emoji.get(gitmojiUnicode)?.code! as GitmojiCode,\n                commitType,\n              ]),\n            ),\n        [],\n      ),\n    );\n  })();\n\n  export function toConventionalCommitType(gitmoji: GitmojiCode): CommitConventionalType {\n    return conversionMap.get(gitmoji) ?? defaultType;\n  }\n}\n","import type { Commit as CommitBase } from 'conventional-commits-parser';\nimport { CommitConventionalType } from './data.js';\nimport { GitmojiCode } from './gitmoji.js';\n\nfunction toConventionalCommitType(text: string) {\n  return GitmojiCode.isValid(text)\n    ? GitmojiCode.toConventionalCommitType(text)\n    : CommitConventionalType.hasInstance(text)\n      ? text\n      : undefined;\n}\n\nexport type Commit = CommitBase;\n\nexport const whatBump = (commits: ReadonlyArray<Commit>) => {\n  let level = 2;\n  let breakings = 0;\n  let features = 0;\n\n  for (const { type, notes } of commits) {\n    const conventionalType = type == null ? type : toConventionalCommitType(type);\n    if (notes.length > 0) {\n      breakings += notes.length;\n      level = 0;\n    } else if (conventionalType === CommitConventionalType.Feat) {\n      features += 1;\n      if (level === 2) {\n        level = 1;\n      }\n    }\n  }\n\n  return {\n    level,\n    reason:\n      breakings === 1\n        ? `There is ${breakings} BREAKING CHANGE and ${features} features`\n        : `There are ${breakings} BREAKING CHANGES and ${features} features`,\n  };\n};\n","import type { CommitTransformFunction, Context } from 'conventional-changelog-writer';\nimport { CommitConventionalType, Commit } from './data.js';\nimport { GitmojiCode } from './gitmoji.js';\n\nexport type Language = 'en-US';\n\nexport interface TransformConfig {\n  scopeDisplayName?: Record<string, string>;\n  displayTypes?: CommitConventionalType[];\n  displayScopes?: string[];\n  showAuthor?: boolean;\n  withEmoji?: boolean;\n  language?: Language;\n}\n\nexport function displayScope(scope: string | null | undefined, scopeDisplayNameMap: Record<string, string>) {\n  return scope == null || scope.length === 0\n    ? scopeDisplayNameMap['*']\n    : scopeDisplayNameMap[scope] == null\n      ? scope\n      : scopeDisplayNameMap[scope];\n}\n\nexport function displayType(type: string, options: displayType.Options = {}): string {\n  const { withEmoji = true, language = 'en-US' } = options;\n\n  if (CommitConventionalType.hasInstance(type)) {\n    const { emoji, [language]: title } = CommitConventionalType.getData(type);\n    return `${withEmoji ? `${emoji} ` : ''}${title}`;\n  }\n\n  return type;\n}\nexport namespace displayType {\n  export interface Options {\n    readonly withEmoji?: boolean | undefined;\n    readonly language?: Language;\n  }\n}\n\nexport function createTransform(config: TransformConfig): CommitTransformFunction<Commit> {\n  const displayTypes = new Set(config.displayTypes == null ? CommitConventionalType.values() : config.displayTypes);\n  const ignoreType = (type: string | undefined) => type == null || !displayTypes.has(type as CommitConventionalType);\n  const ignoreScope = (scope: string | undefined | null) =>\n    config.displayScopes == null ? false : scope != null && !config.displayScopes.includes(scope);\n\n  const transform = (commit: Commit, { repository, host, owner, repoUrl }: Context): Commit | false => {\n    const discard = commit.notes.length === 0;\n    const issues = new Set<string>();\n    const notes = commit.notes.map((note) => ({\n      ...note,\n      title: `${config.withEmoji === false ? '' : 'üí• '}BREAKING CHANGES`,\n    }));\n    const conventionalType =\n      commit.type == null\n        ? undefined\n        : (CommitConventionalType.parse(commit.type) ??\n          (GitmojiCode.isValid(commit.type) ? GitmojiCode.toConventionalCommitType(commit.type) : undefined));\n\n    if (ignoreType(conventionalType) && discard) return false;\n\n    const type =\n      conventionalType == null\n        ? null\n        : displayType(conventionalType, {\n            withEmoji: config.withEmoji,\n          });\n\n    if (ignoreScope(commit.scope)) return false;\n\n    const scopeIntermediate = commit.scope === '*' ? '' : commit.scope;\n    const scope =\n      config.scopeDisplayName == null ? null : (displayScope(scopeIntermediate, config.scopeDisplayName) ?? null);\n    const hash = typeof commit.hash === 'string' ? commit.hash.slice(0, 7) : commit.hash;\n\n    const subject =\n      typeof commit.subject === 'string'\n        ? (() => {\n            let returnValue = commit.subject;\n            const url = repository == null ? repoUrl : [host, owner, repository].filter(Boolean).join('/');\n            if (url != null) {\n              const issueURL = `${url}/issues/`;\n              // Issue URLs.\n              // eslint-disable-next-line unicorn/prefer-string-replace-all\n              returnValue = returnValue.replace(/#(\\d+)/g, (_, issue: string) => {\n                issues.add(issue);\n\n                return `[#${issue}](${issueURL}${issue})`;\n              });\n            }\n            if (host != null) {\n              // User URLs.\n              // eslint-disable-next-line unicorn/prefer-string-replace-all\n              returnValue = returnValue.replace(/\\B@([\\da-z](?:-?[\\d/a-z]){0,38})/g, (_, username: string) =>\n                username.includes('/') ? `@${username}` : `[@${username}](${host}/${username})`,\n              );\n            }\n            return returnValue;\n          })()\n        : commit.subject;\n\n    // Remove references that already appear in the subject\n    const references = commit.references.filter((reference) => !issues.has(reference.issue));\n\n    return {\n      ...commit,\n      type,\n      hash,\n      scope,\n      subject,\n      references,\n      header: commit.header,\n      body: commit.body,\n      footer: commit.footer,\n      merge: commit.merge,\n      revert: commit.revert,\n      notes,\n      mentions: commit.mentions,\n    } as Commit;\n  };\n\n  return transform as unknown as CommitTransformFunction<Commit>;\n}\n","import { readFileSync } from 'node:fs';\nimport nodePath from 'node:path';\nimport type { Options } from 'conventional-changelog-writer';\nimport { fileURLToPath } from 'node:url';\nimport { createTransform } from './transform.js';\nimport { Commit, CommitConventionalType } from './data.js';\n\nexport interface WriterOptions extends Options<Commit> {}\n\nconst _dirname = typeof __dirname === 'undefined' ? nodePath.dirname(fileURLToPath(import.meta.url)) : __dirname;\nconst basePath = nodePath.resolve(nodePath.dirname(_dirname), './template');\n\nexport const defaultDisplayTypes = CommitConventionalType.findWhere((_) => _.changelog);\n\nexport const createWriterOpts = async (): Promise<WriterOptions> => {\n  const mainTemplate = readFileSync(`${basePath}/template.hbs`, 'utf8');\n  const headerPartial = readFileSync(`${basePath}/header.hbs`, 'utf8');\n  const commitPartial = readFileSync(`${basePath}/commit.hbs`, 'utf8');\n  const footerPartial = readFileSync(`${basePath}/footer.hbs`, 'utf8');\n  const author = readFileSync(`${basePath}/author.hbs`, 'utf8');\n\n  return {\n    transform: createTransform({\n      displayTypes: defaultDisplayTypes,\n    }),\n    groupBy: 'type',\n    commitGroupsSort: 'title',\n    // @ts-ignore\n    commitsSort: ['scope', 'subject'],\n    noteGroupsSort: 'title',\n    mainTemplate,\n    headerPartial,\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    commitPartial: commitPartial.replace(/{{gitUserInfo}}/g, author),\n    footerPartial,\n  };\n};\n","import { gitRawCommitOpts } from './git-raw-commit-opts.js';\nimport { createParserOpts } from './parser.js';\nimport { whatBump } from './whatBump.js';\nimport { createWriterOpts } from './writer.js';\n\nexport { Emoji, GitmojiCode } from './gitmoji.js';\n\nexport default async function createPreset() {\n  return {\n    gitRawCommitOpts,\n    parser: createParserOpts(),\n    writer: await createWriterOpts(),\n    whatBump,\n  };\n}\n"],"mappings":"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"}