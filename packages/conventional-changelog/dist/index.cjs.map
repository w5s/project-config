{"version":3,"sources":["../src/git-raw-commit-opts.ts","../src/parser.ts","../src/data.ts","../src/gitmoji.ts","../src/whatBump.ts","../src/transform.ts","../src/writer.ts","../src/index.ts"],"names":["Emoji","emojiRegexp","GitmojiCode","gitmojis","toConventionalCommitType","nodePath","fileURLToPath","readFileSync"],"mappings":"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","file":"index.cjs","sourcesContent":["export const gitRawCommitOpts = {\n  format: '%B%n-hash-%n%H%n-gitTags-%n%d%n-committerDate-%n%ci%n-authorName-%n%an%n-authorEmail-%n%ae',\n};\n","import type { ParserOptions as ParserOptionsDefault } from 'conventional-commits-parser';\n\nexport interface ParserOptions extends ParserOptionsDefault {}\n\nexport const createParserOpts = (): ParserOptions => ({\n  headerPattern: new RegExp(\n    // Type\n    `^(?<type>\\\\S*)? ` +\n    // Scope\n    `(?:\\\\((?<scope>.*)\\\\):? )?` +\n    // Subject\n    `(?<subject>.*)$`,\n    'u',\n  ),\n  headerCorrespondence: ['type', 'scope', 'subject'],\n  revertPattern: /^(?:revert|revert:)\\s\"?([\\S\\s]+?)\"?\\s*this reverts commit (\\w*)\\./i,\n  noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES'],\n  // revertPattern: /revert:\\s([\\S\\s]*?)\\s*this reverts commit (\\w*)\\./i,\n  revertCorrespondence: [`header`, `hash`],\n});\n","import type { Commit as CommitDefault } from 'conventional-commits-parser';\n\nexport type Commit = CommitDefault & {\n  type: string | null;\n  subject: string | null;\n  scope: string | null;\n  hash: string | null;\n};\n\nexport type CommitConventionalType =\n  | 'build'\n  | 'ci'\n  | 'docs'\n  | 'feat'\n  | 'fix'\n  | 'perf'\n  | 'refactor'\n  | 'revert'\n  | 'style'\n  | 'test'\n  | 'wip'\n  | 'chore';\n\nexport const CommitConventionalType = (() => {\n  const enumObject = Object.freeze({\n    Build: 'build',\n    CI: 'ci',\n    Docs: 'docs',\n    Feat: 'feat',\n    Fix: 'fix',\n    Perf: 'perf',\n    Refactor: 'refactor',\n    Revert: 'revert',\n    Style: 'style',\n    Test: 'test',\n    WIP: 'wip',\n    Chore: 'chore',\n  });\n  // eslint-disable-next-line unicorn/no-array-sort\n  const enumValues: readonly CommitConventionalType[] = Object.freeze(Object.values(enumObject).sort());\n  const enumValuesSet = new Set(enumValues);\n\n  const typeData: Record<CommitConventionalType, CommitConventionalTypeData> = {\n    feat: {\n      'emoji': '✨',\n      'en-US': 'Features',\n      'changelog': true,\n    },\n    fix: {\n      'emoji': '🐛',\n      'en-US': 'Bug Fixes',\n      'changelog': true,\n    },\n    build: {\n      'emoji': '👷',\n      'en-US': 'Build System',\n      'changelog': false,\n    },\n    chore: {\n      'emoji': '🎫',\n      'en-US': 'Chores',\n      'changelog': false,\n    },\n    ci: {\n      'emoji': '🔧',\n      'en-US': 'Continuous Integration',\n      'changelog': false,\n    },\n    docs: {\n      'emoji': '📝',\n      'en-US': 'Documentation',\n      'changelog': false,\n    },\n    test: {\n      'emoji': '✅',\n      'en-US': 'Tests',\n      'changelog': false,\n    },\n    perf: {\n      'emoji': '⚡',\n      'en-US': 'Performance Improvements',\n      'changelog': true,\n    },\n    refactor: {\n      'emoji': '♻',\n      'en-US': 'Code Refactoring',\n      'changelog': false,\n    },\n    revert: {\n      'emoji': '⏪',\n      'en-US': 'Reverts',\n      'changelog': true,\n    },\n    style: {\n      'emoji': '💄',\n      'en-US': 'Styles',\n      'changelog': false,\n    },\n    wip: {\n      'emoji': '🚧',\n      'en-US': 'Work in progress',\n      'changelog': false,\n    },\n  };\n\n  function hasInstance(anyValue: unknown): anyValue is CommitConventionalType {\n    return typeof anyValue === 'string' && enumValuesSet.has(anyValue as unknown as CommitConventionalType);\n  }\n\n  function getData(commitType: CommitConventionalType): CommitConventionalTypeData {\n    return typeData[commitType];\n  }\n\n  function parse(anyValue: string): CommitConventionalType | undefined {\n    return hasInstance(anyValue) ? anyValue : undefined;\n  }\n\n  function values() {\n    return enumValues;\n  }\n\n  function findWhere(predicate: (data: CommitConventionalTypeData) => boolean): CommitConventionalType[] {\n    return enumValues.filter((enumValue) => predicate(getData(enumValue)));\n  }\n\n  return { ...enumObject, hasInstance, getData, values, parse, findWhere };\n})();\n\nexport interface CommitConventionalTypeData {\n  'emoji': string;\n  'en-US': string;\n  'changelog': boolean;\n}\n","/* eslint-disable unicorn/prefer-spread */\nimport emojiRegexp from 'emoji-regex';\nimport { type Gitmoji, gitmojis } from 'gitmojis';\nimport type { CommitConventionalType } from './data.js';\n\nexport type Emoji = Emoji.Unicode | Emoji.Text;\nexport namespace Emoji {\n  export const reEmojiUnicode = emojiRegexp();\n\n  export const reEmojiText = /:\\w*:/;\n\n  const reMatchOnly = (input: RegExp) => new RegExp(`^${input.source}$`, '');\n  const _reEmojiUnicode = reMatchOnly(reEmojiUnicode);\n  const _reEmojiText = reMatchOnly(reEmojiText);\n\n  export type Unicode = string & { '@@EmojiStyle': 'unicode' };\n  export type Text = string & { '@@EmojiStyle': 'text' };\n\n  export function isUnicode(anyValue: string): anyValue is Unicode {\n    return _reEmojiUnicode.test(anyValue);\n  }\n\n  export function isText(anyValue: string): anyValue is Text {\n    return _reEmojiText.test(anyValue);\n  }\n\n  export function hasInstance(anyValue: string): anyValue is Emoji {\n    return isText(anyValue) || isUnicode(anyValue);\n  }\n}\n\nexport type GitmojiCode = Emoji & { '@@Gitmoji': true };\nexport namespace GitmojiCode {\n  export type Unicode = Emoji.Unicode & { '@@Gitmoji': true };\n  export type Emoji = Emoji.Text & { '@@Gitmoji': true };\n\n  // export const reEmoji = emojiRegexp();\n\n  const allGitmojiCodes = new Set(\n    gitmojis\n      .map((gitmoji) => gitmoji.code as GitmojiCode)\n      .concat(gitmojis.map((gitmoji) => gitmoji.emoji as GitmojiCode)),\n  );\n  const index = {\n    // code: createIndex(gitmojis, 'code'),\n    emoji: createIndex(gitmojis, 'emoji'),\n  };\n\n  function createIndex<K extends keyof Gitmoji>(list: readonly Gitmoji[], key: K): ReadonlyMap<Gitmoji[K], Gitmoji> {\n    return new Map(list.map((gitmoji) => [gitmoji[key], gitmoji]));\n  }\n\n  export function isValid(anyValue: string): anyValue is GitmojiCode {\n    return allGitmojiCodes.has(anyValue as GitmojiCode);\n  }\n\n  const defaultType = 'chore';\n  const conversionMap: ReadonlyMap<GitmojiCode, CommitConventionalType> = (() => {\n    const data: Record<CommitConventionalType, GitmojiCode.Unicode[]> = {\n      feat: ['✨', '♿️', '🚸'] as GitmojiCode.Unicode[],\n      fix: ['🐛'] as GitmojiCode.Unicode[],\n      docs: ['📝'] as GitmojiCode.Unicode[],\n      style: ['🎨', '🚨'] as GitmojiCode.Unicode[],\n      refactor: ['♻️', '🏗️'] as GitmojiCode.Unicode[],\n      test: ['✅', '🧪'] as GitmojiCode.Unicode[],\n      perf: ['⚡️'] as GitmojiCode.Unicode[],\n      revert: ['⏪️'] as GitmojiCode.Unicode[],\n      ci: ['👷', '💚'] as GitmojiCode.Unicode[],\n      wip: ['🚧'] as GitmojiCode.Unicode[],\n      build: [] as GitmojiCode.Unicode[],\n      chore: ['🔧'] as GitmojiCode.Unicode[],\n    };\n\n    const entries = Array.from<[CommitConventionalType, GitmojiCode.Unicode[]]>(\n      // @ts-ignore entries are not well typed\n      Object.entries(data),\n    );\n    return new Map(\n      entries.reduce<Array<[GitmojiCode, CommitConventionalType]>>(\n        (acc, [commitType, gitmojiUnicodeArray]) =>\n          acc\n            .concat(gitmojiUnicodeArray.map((gitmojiUnicode) => [gitmojiUnicode, commitType]))\n\n            .concat(\n              gitmojiUnicodeArray.map((gitmojiUnicode) => [\n                // eslint-disable-next-line ts/no-non-null-assertion, ts/no-non-null-asserted-optional-chain\n                index.emoji.get(gitmojiUnicode)?.code! as GitmojiCode,\n                commitType,\n              ]),\n            ),\n        [],\n      ),\n    );\n  })();\n\n  export function toConventionalCommitType(gitmoji: GitmojiCode): CommitConventionalType {\n    return conversionMap.get(gitmoji) ?? defaultType;\n  }\n}\n","import type { Commit as CommitBase } from 'conventional-commits-parser';\nimport { CommitConventionalType } from './data.js';\nimport { GitmojiCode } from './gitmoji.js';\n\nfunction toConventionalCommitType(text: string) {\n  return GitmojiCode.isValid(text)\n    ? GitmojiCode.toConventionalCommitType(text)\n    : CommitConventionalType.hasInstance(text)\n      ? text\n      : undefined;\n}\n\nexport type Commit = CommitBase;\n\nexport const whatBump = (commits: ReadonlyArray<Commit>) => {\n  let level = 2;\n  let breakings = 0;\n  let features = 0;\n\n  for (const { type, notes } of commits) {\n    const conventionalType = type == null ? type : toConventionalCommitType(type);\n    if (notes.length > 0) {\n      breakings += notes.length;\n      level = 0;\n    } else if (conventionalType === CommitConventionalType.Feat) {\n      features += 1;\n      if (level === 2) {\n        level = 1;\n      }\n    }\n  }\n\n  return {\n    level,\n    reason:\n      breakings === 1\n        ? `There is ${breakings} BREAKING CHANGE and ${features} features`\n        : `There are ${breakings} BREAKING CHANGES and ${features} features`,\n  };\n};\n","import type { CommitTransformFunction, Context } from 'conventional-changelog-writer';\nimport { CommitConventionalType, Commit } from './data.js';\nimport { GitmojiCode } from './gitmoji.js';\n\nexport type Language = 'en-US';\n\nexport interface TransformConfig {\n  scopeDisplayName?: Record<string, string>;\n  displayTypes?: CommitConventionalType[];\n  displayScopes?: string[];\n  showAuthor?: boolean;\n  withEmoji?: boolean;\n  language?: Language;\n}\n\nexport function displayScope(scope: string | null | undefined, scopeDisplayNameMap: Record<string, string>) {\n  return scope == null || scope.length === 0\n    ? scopeDisplayNameMap['*']\n    : scopeDisplayNameMap[scope] == null\n      ? scope\n      : scopeDisplayNameMap[scope];\n}\n\nexport function displayType(type: string, options: displayType.Options = {}): string {\n  const { withEmoji = true, language = 'en-US' } = options;\n\n  if (CommitConventionalType.hasInstance(type)) {\n    const { emoji, [language]: title } = CommitConventionalType.getData(type);\n    return `${withEmoji ? `${emoji} ` : ''}${title}`;\n  }\n\n  return type;\n}\nexport namespace displayType {\n  export interface Options {\n    readonly withEmoji?: boolean | undefined;\n    readonly language?: Language;\n  }\n}\n\nexport function createTransform(config: TransformConfig): CommitTransformFunction<Commit> {\n  const displayTypes = new Set(config.displayTypes == null ? CommitConventionalType.values() : config.displayTypes);\n  const ignoreType = (type: string | undefined) => type == null || !displayTypes.has(type as CommitConventionalType);\n  const ignoreScope = (scope: string | undefined | null) =>\n    config.displayScopes == null ? false : scope != null && !config.displayScopes.includes(scope);\n\n  const transform = (commit: Commit, { repository, host, owner, repoUrl }: Context): Commit | false => {\n    const discard = commit.notes.length === 0;\n    const issues = new Set<string>();\n    const notes = commit.notes.map((note) => ({\n      ...note,\n      title: `${config.withEmoji === false ? '' : '💥 '}BREAKING CHANGES`,\n    }));\n    const conventionalType =\n      commit.type == null\n        ? undefined\n        : (CommitConventionalType.parse(commit.type) ??\n          (GitmojiCode.isValid(commit.type) ? GitmojiCode.toConventionalCommitType(commit.type) : undefined));\n\n    if (ignoreType(conventionalType) && discard) return false;\n\n    const type =\n      conventionalType == null\n        ? null\n        : displayType(conventionalType, {\n            withEmoji: config.withEmoji,\n          });\n\n    if (ignoreScope(commit.scope)) return false;\n\n    const scopeIntermediate = commit.scope === '*' ? '' : commit.scope;\n    const scope =\n      config.scopeDisplayName == null ? null : (displayScope(scopeIntermediate, config.scopeDisplayName) ?? null);\n    const hash = typeof commit.hash === 'string' ? commit.hash.slice(0, 7) : commit.hash;\n\n    const subject =\n      typeof commit.subject === 'string'\n        ? (() => {\n            let returnValue = commit.subject;\n            const url = repository == null ? repoUrl : [host, owner, repository].filter(Boolean).join('/');\n            if (url != null) {\n              const issueURL = `${url}/issues/`;\n              // Issue URLs.\n              // eslint-disable-next-line unicorn/prefer-string-replace-all\n              returnValue = returnValue.replace(/#(\\d+)/g, (_, issue: string) => {\n                issues.add(issue);\n\n                return `[#${issue}](${issueURL}${issue})`;\n              });\n            }\n            if (host != null) {\n              // User URLs.\n              // eslint-disable-next-line unicorn/prefer-string-replace-all\n              returnValue = returnValue.replace(/\\B@([\\da-z](?:-?[\\d/a-z]){0,38})/g, (_, username: string) =>\n                username.includes('/') ? `@${username}` : `[@${username}](${host}/${username})`,\n              );\n            }\n            return returnValue;\n          })()\n        : commit.subject;\n\n    // Remove references that already appear in the subject\n    const references = commit.references.filter((reference) => !issues.has(reference.issue));\n\n    return {\n      ...commit,\n      type,\n      hash,\n      scope,\n      subject,\n      references,\n      header: commit.header,\n      body: commit.body,\n      footer: commit.footer,\n      merge: commit.merge,\n      revert: commit.revert,\n      notes,\n      mentions: commit.mentions,\n    } as Commit;\n  };\n\n  return transform as unknown as CommitTransformFunction<Commit>;\n}\n","import { readFileSync } from 'node:fs';\nimport nodePath from 'node:path';\nimport type { Options } from 'conventional-changelog-writer';\nimport { fileURLToPath } from 'node:url';\nimport { createTransform } from './transform.js';\nimport { Commit, CommitConventionalType } from './data.js';\n\nexport interface WriterOptions extends Options<Commit> {}\n\nconst _dirname = typeof __dirname === 'undefined' ? nodePath.dirname(fileURLToPath(import.meta.url)) : __dirname;\nconst basePath = nodePath.resolve(nodePath.dirname(_dirname), './template');\n\nexport const defaultDisplayTypes = CommitConventionalType.findWhere((_) => _.changelog);\n\nexport const createWriterOpts = async (): Promise<WriterOptions> => {\n  const mainTemplate = readFileSync(`${basePath}/template.hbs`, 'utf8');\n  const headerPartial = readFileSync(`${basePath}/header.hbs`, 'utf8');\n  const commitPartial = readFileSync(`${basePath}/commit.hbs`, 'utf8');\n  const footerPartial = readFileSync(`${basePath}/footer.hbs`, 'utf8');\n  const author = readFileSync(`${basePath}/author.hbs`, 'utf8');\n\n  return {\n    transform: createTransform({\n      displayTypes: defaultDisplayTypes,\n    }),\n    groupBy: 'type',\n    commitGroupsSort: 'title',\n    // @ts-ignore\n    commitsSort: ['scope', 'subject'],\n    noteGroupsSort: 'title',\n    mainTemplate,\n    headerPartial,\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    commitPartial: commitPartial.replace(/{{gitUserInfo}}/g, author),\n    footerPartial,\n  };\n};\n","import { gitRawCommitOpts } from './git-raw-commit-opts.js';\nimport { createParserOpts } from './parser.js';\nimport { whatBump } from './whatBump.js';\nimport { createWriterOpts } from './writer.js';\n\nexport { Emoji, GitmojiCode } from './gitmoji.js';\n\nexport default async function createPreset() {\n  return {\n    gitRawCommitOpts,\n    parser: createParserOpts(),\n    writer: await createWriterOpts(),\n    whatBump,\n  };\n}\n"]}