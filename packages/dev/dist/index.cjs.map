{"version":3,"sources":["../src/directory.ts","../src/ESLintConfig.ts","../src/file.ts","../src/block.ts","../src/interopDefault.ts","../src/json.ts","../src/Project.ts","../src/ProjectScript.ts","../src/exec.ts","../src/yarnConfig.ts","../src/yarnVersion.ts"],"names":["access","constants","mkdir","rm","existsSync","mkdirSync","rmSync","ESLintConfig","exists","accessSync","readFile","writeFile","readFileSync","writeFileSync","Project","spawnSync","spawn"],"mappings":"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","file":"index.cjs","sourcesContent":["import { existsSync, mkdirSync, rmSync } from 'node:fs';\nimport { access, constants, mkdir, rm } from 'node:fs/promises';\n\nasync function exists(path: string) {\n  try {\n    await access(path, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport interface DirectoryOptions {\n  /**\n   * Directory path\n   */\n  readonly path: string;\n  /**\n   * Directory target state\n   */\n  readonly state: 'present' | 'absent';\n}\n\n/**\n * Ensure directory is present/absent\n *\n * @example\n * ```ts\n * await directory({\n *   path: 'foo/bar',\n *   state: 'present',\n * })\n * ```\n *\n * @param options\n */\nexport async function directory(options: DirectoryOptions): Promise<void> {\n  const { path, state } = options;\n  const isPresent = await exists(path);\n  if (state === 'present') {\n    if (!isPresent) {\n      await mkdir(path, { recursive: true });\n    }\n  } else if (isPresent) {\n    await rm(path, { recursive: true });\n  }\n}\n\n/**\n * Ensure directory is present/absent\n *\n * @example\n * ```ts\n * await directorySync({\n *   path: 'foo/bar',\n *   state: 'present',\n * })\n * ```\n *\n * @param options\n */\nexport function directorySync(options: DirectoryOptions): void {\n  const { path, state } = options;\n  const isPresent = existsSync(path);\n  if (state === 'present') {\n    if (!isPresent) {\n      mkdirSync(path, { recursive: true });\n    }\n  } else if (isPresent) {\n    rmSync(path, { recursive: true });\n  }\n}\n","import type { ESLint } from 'eslint';\n\nfunction toArray<T>(value: T[] | T | undefined): T[] {\n  if (value == null) {\n    return [];\n  }\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\nfunction concatArray<T>(left: T[] | T | undefined, right: T[] | T | undefined): T[] {\n  return [...toArray(left), ...toArray(right)];\n}\n\nexport namespace ESLintConfig {\n  /**\n   *\n   * @param configs\n   */\n  export function concat(...configs: ESLint.ConfigData[]): ESLint.ConfigData {\n    return configs.reduce(\n      (returnValue, config) => ({\n        ...returnValue,\n        ...config,\n        env: { ...returnValue.env, ...config.env },\n        extends: concatArray(returnValue.extends, config.extends),\n        globals: { ...returnValue.globals, ...config.globals },\n        overrides: concatArray(returnValue.overrides, config.overrides),\n        parserOptions: { ...returnValue.parserOptions, ...config.parserOptions },\n        plugins: concatArray(returnValue.plugins, config.plugins),\n        rules: { ...returnValue.rules, ...config.rules },\n        settings: { ...returnValue.settings, ...config.settings },\n      }),\n      {\n        env: {},\n        extends: [],\n        globals: {},\n        overrides: [],\n        parserOptions: {},\n        plugins: [],\n        rules: {},\n        settings: {},\n      },\n    );\n  }\n\n  /**\n   * Always return 'off'. `_status` is the previous rule value.\n   *\n   * @param _status\n   */\n  export function fixme(_status: string | number | [string | number, ...any[]] | undefined) {\n    return 'off' as const;\n  }\n\n  /**\n   * Renames rules in the given object according to the given map.\n   *\n   * Given a map `{ 'old-prefix': 'new-prefix' }`, and a rule object\n   * `{ 'old-prefix/rule-name': 'error' }`, this function will return\n   * `{ 'new-prefix/rule-name': 'error' }`.\n   *\n   * @param rules - The object containing the rules to rename.\n   * @param map - The object containing the rename map.\n   * @returns The object with the renamed rules.\n   */\n  export function renameRules(rules: Record<string, any>, map: Record<string, string>): Record<string, any> {\n    return Object.fromEntries(\n      Object.entries(rules).map(([key, value]) => {\n        for (const [from, to] of Object.entries(map)) {\n          if (key.startsWith(`${from}/`)) return [to + key.slice(from.length), value];\n        }\n        return [key, value];\n      }),\n    );\n  }\n}\n","import { readFile, rm, writeFile, access } from 'node:fs/promises';\nimport { accessSync, constants, readFileSync, rmSync, writeFileSync } from 'node:fs';\n\nasync function exists(path: string) {\n  try {\n    await access(path, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction existsSync(path: string) {\n  try {\n    accessSync(path, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport interface FileOptions {\n  /**\n   * File path\n   */\n  readonly path: string;\n  /**\n   * File target state\n   */\n  readonly state: 'present' | 'absent';\n  /**\n   * File content mapping function\n   *\n   * @param content\n   */\n  readonly update?: ((content: string) => string | undefined) | undefined;\n  /**\n   * File encoding\n   */\n  readonly encoding?: BufferEncoding;\n}\n\n/**\n * Ensure file is present/absent with content initialized or modified with `update\n *\n * @example\n * ```ts\n * await file({\n *   path: 'foo/bar',\n *   state: 'present',\n *   update: (content) => content + '_test', // This will append '_test' after current content\n * })\n * ```\n *\n * @param options\n */\nexport async function file(options: FileOptions): Promise<void> {\n  const { path, state, update, encoding = 'utf8' } = options;\n  if (state === 'present') {\n    const isPresent = await exists(path);\n    const previousContent = isPresent ? await readFile(path, encoding) : '';\n    const newContent = update == null ? '' : update(previousContent);\n    if (newContent != null) {\n      await writeFile(path, newContent, encoding);\n    }\n  } else {\n    await rm(path, { force: true });\n  }\n}\n\n/**\n * Ensure file is present/absent with content initialized or modified with `update\n *\n * @example\n * ```ts\n * fileSync({\n *   path: 'foo/bar',\n *   state: 'present',\n *   update: (content) => content + '_test', // This will append '_test' after current content\n * })\n * ```\n *\n * @param options\n */\nexport function fileSync(options: FileOptions): void {\n  const { path, state, update, encoding = 'utf8' } = options;\n  if (state === 'present') {\n    const isPresent = existsSync(path);\n    const previousContent = isPresent ? readFileSync(path, encoding) : '';\n    const newContent = update == null ? '' : update(previousContent);\n    if (newContent != null) {\n      writeFileSync(path, newContent, encoding);\n    }\n  } else {\n    rmSync(path, { force: true });\n  }\n}\n","import { type FileOptions, file, fileSync } from './file.js';\n\nexport interface BlockOptions {\n  /**\n   * The marker builder function that will take either `markerBegin` or `markerEnd`\n   *\n   * @default '# ${mark} MANAGED BLOCK'\n   */\n  marker?: (mark: 'Begin' | 'End') => string;\n  /**\n   * File path\n   */\n  path: string;\n  /**\n   * Block content to insert\n   */\n  block: string;\n  /**\n   * Insert position\n   */\n  insertPosition?: ['before', 'BeginningOfFile' | RegExp] | ['after', 'EndOfFile' | RegExp];\n  /**\n   * Block target state\n   */\n  state?: 'present' | 'absent';\n}\n\nconst EOF = 'EndOfFile';\nconst BOF = 'BeginningOfFile';\nconst insertAt = (str: string, index: number, toInsert: string) => str.slice(0, index) + toInsert + str.slice(index);\nconst matchLast = (string: string, regexp: RegExp) => {\n  const matcher = new RegExp(regexp.source, `${regexp.flags}g`);\n  let firstIndex = -1;\n  let lastIndex = -1;\n  let matches;\n  // eslint-disable-next-line ts/no-unnecessary-condition, no-constant-condition\n  while (true) {\n    matches = matcher.exec(string);\n    if (matches == null) {\n      break;\n    }\n    firstIndex = matches.index;\n    lastIndex = matcher.lastIndex;\n  }\n  return { firstIndex, lastIndex };\n};\n\nfunction toFileOptions(options: BlockOptions): FileOptions {\n  const {\n    marker = (mark) => `# ${mark.toUpperCase()} MANAGED BLOCK`,\n    path,\n    block: blockName,\n    insertPosition = ['after', EOF],\n    state = 'present',\n  } = options;\n\n  const EOL = '\\n';\n  const beginBlock = marker('Begin');\n  const endBlock = marker('End');\n\n  /**\n   * @param content\n   */\n  function findBlock(content: string) {\n    const startIndex = content.indexOf(beginBlock);\n    const endIndex = content.indexOf(endBlock) + endBlock.length;\n\n    return {\n      endIndex,\n      exists: startIndex !== -1 && endIndex >= 0,\n      startIndex,\n    };\n  }\n\n  function apply(fullContent: string, blockContent: string) {\n    const found = findBlock(fullContent);\n    const remove = state === 'absent';\n    const replaceBlock = remove ? '' : beginBlock + EOL + blockContent + EOL + endBlock;\n    const [positionDirection, positionAnchor] = insertPosition;\n\n    if (found.exists) {\n      return fullContent.slice(0, found.startIndex) + replaceBlock + fullContent.slice(found.endIndex);\n    }\n    if (remove) {\n      return fullContent;\n    }\n    switch (positionDirection) {\n      case 'before': {\n        if (positionAnchor !== BOF) {\n          const { firstIndex } = matchLast(fullContent, positionAnchor);\n          if (firstIndex >= 0) {\n            return insertAt(fullContent, firstIndex, replaceBlock + EOL);\n          }\n        }\n\n        // Beginning of file\n        return replaceBlock + EOL + fullContent;\n      }\n      case 'after': {\n        // insert\n        if (positionAnchor !== EOF) {\n          const { lastIndex } = matchLast(fullContent, positionAnchor);\n          if (lastIndex >= 0) {\n            return insertAt(fullContent, lastIndex, EOL + replaceBlock);\n          }\n        }\n\n        // end of file\n        return fullContent + EOL + replaceBlock;\n      }\n\n      default: {\n        throw new Error(`Unsupported position ${String(positionDirection)}`);\n      }\n    }\n  }\n\n  return {\n    path,\n    state: 'present',\n    update: (sourceContent) => apply(sourceContent, blockName),\n  };\n}\n\n/**\n * Replace asynchronously a block in file that follows pattern :\n *\n * marker(markerBegin)\n * ...\n * marker(markerEnd)\n *\n * @param options\n */\nexport function block(options: BlockOptions) {\n  return file(toFileOptions(options));\n}\n\n/**\n * Replace synchronously a block in file that follows pattern :\n *\n * marker(markerBegin)\n * ...\n * marker(markerEnd)\n *\n * @param options\n */\nexport function blockSync(options: BlockOptions) {\n  return fileSync(toFileOptions(options));\n}\n","// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access\nconst getDefaultOrElse = (_: any) => _?.default ?? _;\n/**\n * Resolves a module or promise-like object, returning the default export if available.\n *\n * @example\n * ```ts\n * // modules.ts\n * export default {\n *   foo: true\n * };\n * // Async API\n * const modPromise = import('./module');\n * interopDefault(modPromise); // == Promise.resolve({ foo: true })\n * // Sync API\n * const mod = await import('./module');\n * interopDefault(mod); // == { foo: true }\n * ```\n *\n * @template T - The type of the module or promise-like object.\n * @param m - The module or promise-like object to resolve.\n * @returns A promise resolving to the default export if present, otherwise the module itself.\n */\nexport function interopDefault<T>(m: PromiseLike<T>): Promise<T extends { default: infer U } ? U : T>;\nexport function interopDefault<T>(m: T): T extends { default: infer U } ? U : T;\nexport function interopDefault<T>(m: T | PromiseLike<T>): Promise<T extends { default: infer U } ? U : T> {\n  // @ts-ignore We know what we are doing\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return, promise/prefer-await-to-then\n  return m != null && typeof m.then === 'function' ? Promise.resolve(m).then(getDefaultOrElse) : getDefaultOrElse(m);\n}\n","import { type FileOptions, file, fileSync } from './file.js';\n\nexport type JSONValue = null | number | string | boolean | JSONValue[] | { [key: string]: JSONValue };\n\nexport interface JSONOption<V = JSONValue> {\n  /**\n   * File path\n   */\n  readonly path: string;\n  /**\n   * File target state\n   */\n  readonly state: 'present' | 'absent';\n  /**\n   * File content mapping function\n   *\n   * @param content\n   */\n  readonly update?: ((content: V | undefined) => V | undefined) | undefined;\n  /**\n   * File encoding\n   */\n  readonly encoding?: BufferEncoding;\n}\n\nfunction toFileOption<Value>({ update, ...otherOptions }: JSONOption<Value>): FileOptions {\n  return {\n    ...otherOptions,\n\n    update:\n      update == null\n        ? update\n        : (content) => {\n            const jsonValue = content === '' ? undefined : (JSON.parse(content) as Value);\n\n            return JSON.stringify(update(jsonValue));\n          },\n  };\n}\n\n/**\n * Ensure file is present/absent asynchronously with content value initialized or modified with `update`\n *\n * @param options\n */\nexport async function json<Value>(options: JSONOption<Value>): Promise<void> {\n  return file(toFileOption(options));\n}\n\n/**\n * Ensure file is present/absent synchronously with content value initialized or modified with `update`\n *\n * @param options\n */\nexport function jsonSync<Value>(options: JSONOption<Value>): void {\n  return fileSync(toFileOption(options));\n}\n","import type { LanguageId } from './LanguageId.js';\n\nfunction escapeRegExp(value: string) {\n  // eslint-disable-next-line unicorn/prefer-string-raw\n  return value.replaceAll(/[$()*+.?[\\\\\\]^{|}]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport namespace Project {\n  /**\n   * A type of a file extension\n   */\n  export type Extension = `.${string}`;\n\n  /**\n   * Object hash of all well-known file extension category to file extensions mapping\n   */\n  export type ExtensionRegistry = { [K in LanguageId]: readonly Extension[] };\n\n  /**\n   * Supported ECMA version\n   *\n   * @example\n   * ```ts\n   * Project.ecmaVersion() // 2022\n   * ```\n   */\n  export function ecmaVersion() {\n    return 2022 as const;\n  }\n\n  const registry: ExtensionRegistry = {\n    css: ['.css'],\n    graphql: ['.gql', '.graphql'],\n    javascript: ['.js', '.cjs', '.mjs'],\n    javascriptreact: ['.jsx'],\n    jpeg: ['.jpg', '.jpeg'],\n    json: ['.json'],\n    jsonc: ['.jsonc'],\n    less: ['.less'],\n    markdown: ['.markdown', '.mdown', '.mkd', '.md'],\n    sass: ['.sass'],\n    scss: ['.scss'],\n    typescript: ['.ts', '.cts', '.mts'],\n    typescriptreact: ['.tsx'],\n    vue: ['.vue'],\n    yaml: ['.yaml', '.yml'],\n  };\n\n  /**\n   * Return a list of extensions\n   *\n   * @example\n   * ```ts\n   * Project.queryExtensions(['javascript']); // ['.js', '.cjs', ...]\n   * Project.queryExtensions(['typescript', 'typescriptreact']); // ['.ts', '.mts', ..., '.tsx']\n   * ```\n   *\n   * @param languages\n   */\n  export function queryExtensions(languages: LanguageId[]): readonly Extension[] {\n    return languages\n      .reduce<Extension[]>((previousValue, currentValue) =>\n        // eslint-disable-next-line unicorn/prefer-spread\n        previousValue.concat(registry[currentValue] ?? ([] as Extension[])), [])\n      .sort();\n  }\n\n  /**\n   * Supported file extensions\n   *\n   * @example\n   * ```ts\n   * Project.sourceExtensions() // ['.ts', '.js', ...]\n   * ```\n   */\n  export function sourceExtensions() {\n    return queryExtensions(['javascript', 'javascriptreact', 'typescript', 'typescriptreact']);\n  }\n\n  const RESOURCE_EXTENSIONS: readonly Extension[] = Object.freeze([\n    '.gif',\n    '.png',\n    '.svg',\n    ...queryExtensions(['css', 'graphql', 'jpeg', 'less', 'sass', 'sass', 'yaml']),\n  ]);\n\n  /**\n   * Resource file extensions\n   *\n   * @example\n   * ```ts\n   * Project.resourceExtensions() // ['.css', '.sass', ...]\n   * ```\n   */\n  export function resourceExtensions() {\n    return RESOURCE_EXTENSIONS;\n  }\n\n  const IGNORED = Object.freeze([\n    'node_modules/',\n    'build/',\n    'cjs/',\n    'coverage/',\n    'dist/',\n    'dts/',\n    'esm/',\n    'lib/',\n    'mjs/',\n    'umd/',\n  ]);\n\n  /**\n   * Files and folders to always ignore\n   *\n   * @example\n   * ```ts\n   * IGNORED // ['node_modules/', 'build/', ...]\n   * ```\n   */\n  export function ignored() {\n    return IGNORED;\n  }\n\n  /**\n   * Return a RegExp that will match any list of extensions\n   *\n   * @example\n   * ```ts\n   * Project.extensionsToMatcher(['.js', '.ts']) // RegExp = /(\\.js|\\.ts)$/\n   * ```\n   */\n  export function extensionsToMatcher(extensions: readonly Extension[]): RegExp {\n    return new RegExp(`(${extensions.map(escapeRegExp).join('|')})$`);\n  }\n\n  /**\n   * Return a glob matcher that will match any list of extensions\n   *\n   * @example\n   * ```ts\n   * Project.extensionsToGlob(['.js', '.ts']) // '*.+(js|ts)'\n   * ```\n   */\n  export function extensionsToGlob(extensions: readonly Extension[]): string {\n    return `*.+(${extensions.map((_) => _.replace(/^\\./, '')).join('|')})`;\n  }\n}\n","/**\n * Project common scripts\n */\nexport const ProjectScript = {\n  Build: 'build',\n  Clean: 'clean',\n  CodeAnalysis: 'code-analysis',\n  Coverage: 'coverage',\n  Develop: 'develop',\n  Docs: 'docs',\n  Format: 'format',\n  Install: 'install',\n  Lint: 'lint',\n  Prepare: 'prepare',\n  Release: 'release',\n  Rescue: 'rescue',\n  Spellcheck: 'spellcheck',\n  Test: 'test',\n  Validate: 'validate',\n} as const;\nexport type ProjectScript = (typeof ProjectScript)[keyof typeof ProjectScript];\n","import { spawn, spawnSync } from 'node:child_process';\n\nexport interface ExecOptions {\n  /**\n   * Current working directory\n   */\n  cwd?: string;\n  /**\n   * Stdio options\n   */\n  stdio?: 'inherit' | 'pipe' | 'ignore';\n}\n\n/**\n * Runs a command in a shell and returns a promise that resolves with an object\n * containing the stdout and stderr strings.\n *\n * @param command - The command to run\n * @param args - The arguments to pass to the command\n * @returns A promise that resolves with an object like `{ stdout: string, stderr: string }`\n */\nexport function execSync(\n  command: string,\n  args: ReadonlyArray<string>,\n  options?: ExecOptions,\n): { stdout: string; stderr: string } {\n  const result = spawnSync(command, args, { ...options });\n  const encoding = 'utf8';\n\n  return { stdout: result.stdout.toString(encoding), stderr: result.stderr.toString(encoding) };\n}\n\n/**\n * Runs a command in a shell and returns a promise that resolves with an object\n * containing the stdout and stderr strings.\n *\n * @param command - The command to run\n * @param args - The arguments to pass to the command\n * @returns A promise that resolves with an object containing the stdout and stderr strings\n */\nexport async function exec(\n  command: string,\n  args: ReadonlyArray<string>,\n  options?: ExecOptions,\n): Promise<{ stdout: string; stderr: string }> {\n  return new Promise((resolve, reject) => {\n    const encoding = 'utf8';\n    const child = spawn(command, args, { ...options });\n    let stdout = '';\n    let stderr = '';\n\n    // Capture the stdout and stderr streams\n    if (child.stdout != null) {\n      child.stdout.on('data', (data) => {\n        // eslint-disable-next-line ts/no-unsafe-call, ts/no-unsafe-member-access\n        stdout += data.toString(encoding);\n      });\n    }\n    if (child.stderr != null) {\n      child.stderr.on('data', (data) => {\n        // eslint-disable-next-line ts/no-unsafe-call, ts/no-unsafe-member-access\n        stderr += data.toString(encoding);\n      });\n    }\n    // Handle process exit\n    child.on('close', (_code) => {\n      resolve({ stdout, stderr });\n    });\n\n    // Handle errors\n    child.on('error', reject);\n  });\n}\n","import { exec, execSync } from './exec.js';\n\nexport interface YarnConfigOptions {\n  /**\n   * Configuration key\n   */\n  readonly key: string;\n\n  /**\n   * Option target state\n   */\n  readonly state: 'present' | 'absent';\n\n  /**\n   * File content mapping function\n   *\n   * @param content\n   */\n  readonly update?: ((content: string) => string | undefined) | undefined;\n}\n\n/**\n * Synchronous version of {@link yarnConfig}\n *\n * @example\n * yarnConfigSync({\n *   key: 'nodeLinker',\n *   state: 'present',\n *   update: (content) => content.replace('node-modules', 'hoisted'),\n * })\n */\nexport function yarnConfigSync(options: YarnConfigOptions) {\n  const { key, state, update } = options;\n  if (state === 'present') {\n    const { stdout } = execSync('yarn', ['config', 'get', String(key)]);\n    execSync('yarn', ['config', 'set', String(key), `${update == null ? '' : update(stdout)}`]);\n  } else {\n    execSync('yarn', ['config', 'unset']);\n  }\n}\n\n/**\n * Set/Unset yarn configuration value\n *\n * @example\n * await yarnConfig({\n *   key: 'nodeLinker',\n *   state: 'present',\n *   update: (content) => content.replace('node-modules', 'hoisted'),\n * })\n */\nexport async function yarnConfig(options: YarnConfigOptions): Promise<void> {\n  const { key, state, update } = options;\n  if (state === 'present') {\n    const { stdout } = await exec('yarn', ['config', 'get', String(key)]);\n    await exec('yarn', ['config', 'set', String(key), `${update == null ? '' : update(stdout)}`]);\n  } else {\n    await exec('yarn', ['config', 'unset']);\n  }\n}\n","import { exec, execSync } from './exec.js';\n\nexport type YarnVersionKind = 'berry' | 'classic';\n\nexport interface YarnVersionOptions {\n  /**\n   * Option target state\n   */\n  readonly state: 'present' | 'absent';\n\n  /**\n   * Version mapping function\n   *\n   * @param content\n   */\n  readonly update?: (() => YarnVersionKind | undefined) | undefined;\n}\n\n/**\n * Synchronous version of {@link yarnVersion}\n *\n * @example\n * yarnVersionSync({\n *   state: 'present',\n *   update: () => 'berry', // or 'classic'\n * })\n */\nexport function yarnVersionSync(options: YarnVersionOptions) {\n  const { state, update } = options;\n  if (state === 'present') {\n    execSync('yarn', ['set', 'version', `${update == null ? 'berry' : update()}`]);\n  } else {\n    // TODO: remove yarn.lock\n    throw new Error('Not implemented');\n  }\n}\n\n/**\n * Set/Unset yarn configuration value\n *\n * @example\n * await yarnVersion({\n *   state: 'present',\n *   update: () => 'berry', // or 'classic'\n * })\n */\nexport async function yarnVersion(options: YarnVersionOptions): Promise<void> {\n  const { state, update } = options;\n  if (state === 'present') {\n    await exec('yarn', ['set', 'version', `${update == null ? 'berry' : update()}`]);\n  } else {\n    // TODO: remove yarn.lock\n    throw new Error('Not implemented');\n  }\n}\n"]}