{"version":3,"file":"index.js","names":["typeGitmojiStyle: Rule<'unicode' | 'emoji'>","typeValidGitmoji: Rule","gitmojiPlugin: Plugin"],"sources":["../src/plugin.ts","../src/index.ts"],"sourcesContent":["import type { Plugin, Rule, RuleConfigCondition } from '@commitlint/types';\nimport { Emoji, GitmojiCode } from '@w5s/conventional-changelog';\n\nconst $if =\n  (when: RuleConfigCondition | undefined = 'always') =>\n    (cond: boolean) =>\n      when === 'always' ? cond : !cond;\n\nexport const typeGitmojiStyle: Rule<'unicode' | 'emoji'> = (parsed, when = 'always', value = 'unicode') => {\n  const isUnicode = parsed.type != null && Emoji.isUnicode(parsed.type);\n  const isEmoji = parsed.type != null && Emoji.isText(parsed.type);\n\n  return value === 'unicode'\n    ? $if(when)(isUnicode)\n      ? [true]\n      : [false, `Type should ${when} be an unicode character`]\n    : $if(when)(isEmoji)\n      ? [true]\n      : [false, `Type should ${when} be an valid :emoji:`];\n};\n\nexport const typeValidGitmoji: Rule = (parsed, when = 'always') => {\n  const isValidGitmoji = parsed.type != null && GitmojiCode.isValid(parsed.type);\n\n  return $if(when)(isValidGitmoji)\n    ? [true]\n    : [false, `Type should ${when} be an valid gitmoji (see https://gitmoji.dev)`];\n};\n\n/**\n * Gitmoji plugins\n */\nexport const gitmojiPlugin: Plugin = {\n  rules: {\n    'type-gitmoji-style': typeGitmojiStyle,\n    'type-valid-gitmoji': typeValidGitmoji,\n  },\n};\n","import { RuleConfigSeverity, type QualifiedRules, type LintOptions } from '@commitlint/types';\nimport conventionalChangelogPreset from '@w5s/conventional-changelog';\nimport { gitmojiPlugin } from './plugin.js';\n\nconst { Error, Warning, Disabled } = RuleConfigSeverity;\n\nconst parserPreset = {\n  // eslint-disable-next-line unicorn/no-await-expression-member\n  parserOpts: (await conventionalChangelogPreset()).parser as any,\n} satisfies LintOptions;\n\nconst rules: QualifiedRules = {\n  'body-leading-blank': [Warning, 'always'],\n  'body-max-line-length': [Error, 'always', 100],\n  'footer-leading-blank': [Warning, 'always'],\n  'footer-max-line-length': [Error, 'always', 100],\n  'header-max-length': [Error, 'always', 100],\n  'scope-case': [Error, 'always', 'lower-case'],\n  'subject-case': [Error, 'always', ['sentence-case']],\n  'subject-empty': [Error, 'never'],\n  'subject-exclamation-mark': [Error, 'never'],\n  'subject-full-stop': [Error, 'never', '.'],\n  'type-case': [Error, 'always', 'lower-case'],\n  'type-empty': [Error, 'never'],\n  'type-enum': [Disabled],\n  'type-gitmoji-style': [Error, 'always', 'unicode'],\n  'type-valid-gitmoji': [Error, 'always'],\n};\n\nconst config = {\n  parserPreset,\n  rules,\n  plugins: [gitmojiPlugin],\n};\n\nexport default config;\n"],"mappings":";;;;AAGA,MAAM,OACH,OAAwC,cACtC,SACC,SAAS,WAAW,OAAO,CAAC;AAElC,MAAaA,oBAA+C,QAAQ,OAAO,UAAU,QAAQ,cAAc;CACzG,MAAM,YAAY,OAAO,QAAQ,QAAQ,MAAM,UAAU,OAAO,KAAK;CACrE,MAAM,UAAU,OAAO,QAAQ,QAAQ,MAAM,OAAO,OAAO,KAAK;AAEhE,QAAO,UAAU,YACb,IAAI,KAAK,CAAC,UAAU,GAClB,CAAC,KAAK,GACN,CAAC,OAAO,eAAe,KAAK,0BAA0B,GACxD,IAAI,KAAK,CAAC,QAAQ,GAChB,CAAC,KAAK,GACN,CAAC,OAAO,eAAe,KAAK,sBAAsB;;AAG1D,MAAaC,oBAA0B,QAAQ,OAAO,aAAa;CACjE,MAAM,iBAAiB,OAAO,QAAQ,QAAQ,YAAY,QAAQ,OAAO,KAAK;AAE9E,QAAO,IAAI,KAAK,CAAC,eAAe,GAC5B,CAAC,KAAK,GACN,CAAC,OAAO,eAAe,KAAK,gDAAgD;;;;;AAMlF,MAAaC,gBAAwB,EACnC,OAAO;CACL,sBAAsB;CACtB,sBAAsB;CACvB,EACF;;;;ACjCD,MAAM,EAAE,OAAO,SAAS,aAAa;AAyBrC,MAAM,SAAS;CACb,cAxBmB,EAEnB,aAAa,MAAM,6BAA6B,EAAE,QACnD;CAsBC,OApB4B;EAC5B,sBAAsB,CAAC,SAAS,SAAS;EACzC,wBAAwB;GAAC;GAAO;GAAU;GAAI;EAC9C,wBAAwB,CAAC,SAAS,SAAS;EAC3C,0BAA0B;GAAC;GAAO;GAAU;GAAI;EAChD,qBAAqB;GAAC;GAAO;GAAU;GAAI;EAC3C,cAAc;GAAC;GAAO;GAAU;GAAa;EAC7C,gBAAgB;GAAC;GAAO;GAAU,CAAC,gBAAgB;GAAC;EACpD,iBAAiB,CAAC,OAAO,QAAQ;EACjC,4BAA4B,CAAC,OAAO,QAAQ;EAC5C,qBAAqB;GAAC;GAAO;GAAS;GAAI;EAC1C,aAAa;GAAC;GAAO;GAAU;GAAa;EAC5C,cAAc,CAAC,OAAO,QAAQ;EAC9B,aAAa,CAAC,SAAS;EACvB,sBAAsB;GAAC;GAAO;GAAU;GAAU;EAClD,sBAAsB,CAAC,OAAO,SAAS;EACxC;CAKC,SAAS,CAAC,cAAc;CACzB;AAED,kBAAe"}