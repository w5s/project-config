{"version":3,"sources":["../src/plugin.ts","../src/index.ts"],"names":["conventionalChangelog"],"mappings":"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","file":"index.js","sourcesContent":["import type { Plugin, Rule, RuleConfigCondition } from '@commitlint/types';\nimport Changelog from '@w5s/conventional-changelog';\n\nconst $if =\n  (when: RuleConfigCondition | undefined = 'always') =>\n  (cond: boolean) =>\n    when === 'always' ? cond : !cond;\n\nexport const typeGitmojiStyle: Rule<'unicode' | 'emoji'> = (parsed, when = 'always', value = 'unicode') => {\n  const isUnicode = parsed.type != null && Changelog.Emoji.isUnicode(parsed.type);\n  const isEmoji = parsed.type != null && Changelog.Emoji.isText(parsed.type);\n\n  return value === 'unicode'\n    ? $if(when)(isUnicode)\n      ? [true]\n      : [false, `Type should ${when} be an unicode character`]\n    : $if(when)(isEmoji)\n      ? [true]\n      : [false, `Type should ${when} be an valid :emoji:`];\n};\n\nexport const typeValidGitmoji: Rule = (parsed, when = 'always') => {\n  const isValidGitmoji = parsed.type != null && Changelog.GitmojiCode.isValid(parsed.type);\n\n  return $if(when)(isValidGitmoji)\n    ? [true]\n    : [false, `Type should ${when} be an valid gitmoji (see https://gitmoji.dev)`];\n};\n\n/**\n * Gitmoji plugins\n */\nexport const gitmojiPlugin: Plugin = {\n  rules: {\n    'type-gitmoji-style': typeGitmojiStyle,\n    'type-valid-gitmoji': typeValidGitmoji,\n  },\n};\n","import { RuleConfigSeverity, type QualifiedRules, type LintOptions } from '@commitlint/types';\nimport conventionalChangelog from '@w5s/conventional-changelog';\nimport { gitmojiPlugin } from './plugin.js';\n\nconst { Error, Warning, Disabled } = RuleConfigSeverity;\n\nconst parserPreset = {\n  parserOpts: conventionalChangelog.parserOpts as Exclude<LintOptions['parserOpts'], undefined>,\n} satisfies LintOptions;\n\nconst rules: QualifiedRules = {\n  'body-leading-blank': [Warning, 'always'],\n  'body-max-line-length': [Error, 'always', 100],\n  'footer-leading-blank': [Warning, 'always'],\n  'footer-max-line-length': [Error, 'always', 100],\n  'header-max-length': [Error, 'always', 100],\n  'scope-case': [Error, 'always', 'lower-case'],\n  'subject-case': [Error, 'always', ['sentence-case']],\n  'subject-empty': [Error, 'never'],\n  'subject-exclamation-mark': [Error, 'never'],\n  'subject-full-stop': [Error, 'never', '.'],\n  'type-case': [Error, 'always', 'lower-case'],\n  'type-empty': [Error, 'never'],\n  'type-enum': [Disabled],\n  'type-gitmoji-style': [Error, 'always', 'unicode'],\n  'type-valid-gitmoji': [Error, 'always'],\n};\n\nconst config = {\n  parserPreset,\n  rules,\n  plugins: [gitmojiPlugin],\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default config;\n"]}