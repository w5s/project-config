{"version":3,"sources":["../src/plugin.ts","../src/index.ts"],"names":["conventionalChangelog"],"mappings":"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","file":"index.js","sourcesContent":["import type { Plugin, Rule, RuleConfigCondition } from '@commitlint/types';\nimport Changelog from '@w5s/conventional-changelog';\n\nconst $if =\n  (when: RuleConfigCondition | undefined = 'always') =>\n  (cond: boolean) =>\n    when === 'always' ? cond : !cond;\n\nexport const typeGitmojiStyle: Rule<'unicode' | 'emoji'> = (parsed, when = 'always', value = 'unicode') => {\n  const isUnicode = parsed.type != null && Changelog.Emoji.isUnicode(parsed.type);\n  const isEmoji = parsed.type != null && Changelog.Emoji.isText(parsed.type);\n\n  return value === 'unicode'\n    ? $if(when)(isUnicode)\n      ? [true]\n      : [false, `Type should ${when} be an unicode character`]\n    : $if(when)(isEmoji)\n      ? [true]\n      : [false, `Type should ${when} be an valid :emoji:`];\n};\n\nexport const typeValidGitmoji: Rule = (parsed, when = 'always') => {\n  const isValidGitmoji = parsed.type != null && Changelog.GitmojiCode.isValid(parsed.type);\n\n  return $if(when)(isValidGitmoji)\n    ? [true]\n    : [false, `Type should ${when} be an valid gitmoji (see https://gitmoji.dev)`];\n};\n\n/**\n * Gitmoji plugins\n */\nexport const gitmojiPlugin: Plugin = {\n  rules: {\n    'type-gitmoji-style': typeGitmojiStyle,\n    'type-valid-gitmoji': typeValidGitmoji,\n  },\n};\n","import { RuleConfigSeverity, type QualifiedRules, type LintOptions } from '@commitlint/types';\nimport conventionalChangelog from '@w5s/conventional-changelog';\nimport { gitmojiPlugin } from './plugin.js';\n\nconst { Error, Warning, Disabled } = RuleConfigSeverity;\n\nconst parserPreset = {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  parserOpts: conventionalChangelog.parserOpts as Exclude<LintOptions['parserOpts'], undefined>,\n} satisfies LintOptions;\n\nconst rules: QualifiedRules = {\n  'body-leading-blank': [Warning, 'always'],\n  'body-max-line-length': [Error, 'always', 100],\n  'footer-leading-blank': [Warning, 'always'],\n  'footer-max-line-length': [Error, 'always', 100],\n  'header-max-length': [Error, 'always', 100],\n  'scope-case': [Error, 'always', 'lower-case'],\n  'subject-case': [Error, 'always', ['sentence-case']],\n  'subject-empty': [Error, 'never'],\n  'subject-exclamation-mark': [Error, 'never'],\n  'subject-full-stop': [Error, 'never', '.'],\n  'type-case': [Error, 'always', 'lower-case'],\n  'type-empty': [Error, 'never'],\n  'type-enum': [Disabled],\n  'type-gitmoji-style': [Error, 'always', 'unicode'],\n  'type-valid-gitmoji': [Error, 'always'],\n};\n\nconst config = {\n  parserPreset,\n  rules,\n  plugins: [gitmojiPlugin],\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default config;\n"]}